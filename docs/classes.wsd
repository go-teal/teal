@startuml

interface Asset {
    +Execute(input map[string]interface{}) (interface{}, error)
	+GetUpstreams() []string
	+GetDownstreams() []string
	+GetName() string
}

Class SQLModelAsset
Interface DBDriver {
	+Connect() error
	+Begin() (interface{}, error)
	+Commit(tx interface{}) error
	+Rallback(tx interface{}) error
	+Close() error
	+Exec(tx interface{}, sql string) error
	+GetListOfFields(tx interface{}, tableName string) []string
	+CheckTableExists(tx interface{}, tableName string) bool
	+CheckSchemaExists(tx interface{}, schemaName string) bool
	+MountSource(sourceProfile *configs.SourceProfile) error
	+UnMountSource(sourceProfile *configs.SourceProfile) error
}

Class DuckDB
Class PostgreSQL
Class ClickHouse
Class MySQL
Class SQLModelDescriptor
Interface DAG {
    +Run() *sync.WaitGroup
	+Push(...)
	+Stop()
}

Interface Executor{
	+func(input, modelProfile) (interface{}, error)
}

class Routine

SQLModelAsset .up.|> Asset
RawAsset .up.|> Asset
SQLModelAsset o-right-> DBDriver
SQLModelAsset o--> SQLModelDescriptor
RawAsset o--> Executor
DuckDB .up.|> DBDriver
PostgreSQL .up.|> DBDriver
ClickHouse .up.|> DBDriver
MySQL .up.|> DBDriver

ChannelDAG .up.|> DAG 
ChannelDAG *-left->Routine 
Routine o-left->Asset
@enduml